name: Build Container Image and Push to ghcr.io

on:
  repository_dispatch:
    types: [container_build]

permissions:
  contents: read
  packages: write

jobs:
  build_and_deploy:
    name: üöÄ Build and Deploy
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 20

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üîí Registry Login
        run: |
          echo "üîê Authenticating with container registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io \
            -u "dx.local" \
            --password-stdin
          echo "‚úÖ Registry login successful"

      - name: üê≥ Build and Push
        run: |
          echo "üê≥ Building Docker image for '$IMAGE_NAME' with tag 'latest' ..."
          docker build -t ghcr.io/dxfrontier/$IMAGE_NAME:latest ./
          echo "‚úÖ Image built."

          echo "üì§ Pushing image to GHCR..."
          docker push ghcr.io/dxfrontier/$IMAGE_NAME:latest
          echo "‚úÖ Image pushed."
        env:
          IMAGE_NAME: ${{ github.event.client_payload.image }}

      - name: üè• Health Check - Wait for Pod to Spawn
        if: ${{ github.event.client_payload.app_url != '' && github.event.client_payload.app_url != null }}
        run: |
          APP_URL="${{ github.event.client_payload.app_url }}"
          MAX_HEALTH_CHECK_ATTEMPTS="${{ github.event.client_payload.max_health_check_attempts }}"
          HEALTH_CHECK_INTERVAL="${{ github.event.client_payload.health_check_interval }}"

          # Set defaults if not provided
          MAX_HEALTH_CHECK_ATTEMPTS=${MAX_HEALTH_CHECK_ATTEMPTS:-60}
          HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-10}

          if [ -z "$APP_URL" ]; then
            echo "‚ö†Ô∏è No app URL provided, skipping health check"
            exit 0
          fi

          echo "üîç Starting health check for: $APP_URL"
          echo "‚è±Ô∏è Will attempt $MAX_HEALTH_CHECK_ATTEMPTS times with $HEALTH_CHECK_INTERVAL second intervals"
          echo "‚è≥ Maximum wait time: $(($MAX_HEALTH_CHECK_ATTEMPTS * $HEALTH_CHECK_INTERVAL)) seconds (~$(($MAX_HEALTH_CHECK_ATTEMPTS * $HEALTH_CHECK_INTERVAL / 60)) minutes)"

          ATTEMPT=0
          SUCCESS=false

          while [ $ATTEMPT -lt $MAX_HEALTH_CHECK_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo ""
            echo "üîÑ Attempt $ATTEMPT/$MAX_HEALTH_CHECK_ATTEMPTS..."
            
            # Try to reach the app URL
            # -s: silent, -f: fail on HTTP errors, -L: follow redirects, -o: output to /dev/null
            # --connect-timeout: timeout for connection, --max-time: maximum time for the entire operation
            if curl -s -f -L -o /dev/null --connect-timeout 10 --max-time 30 "$APP_URL"; then
              echo "‚úÖ SUCCESS! Application is responding at $APP_URL"
              echo "üéâ Pod has successfully spawned and is healthy"
              SUCCESS=true
              break
            else
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -L --connect-timeout 10 --max-time 30 "$APP_URL" || echo "000")
              echo "‚è≥ App not ready yet (HTTP $HTTP_CODE). Waiting $HEALTH_CHECK_INTERVAL seconds..."
              
              if [ $ATTEMPT -lt $MAX_HEALTH_CHECK_ATTEMPTS ]; then
                sleep $HEALTH_CHECK_INTERVAL
              fi
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo ""
            echo "‚ùå FAILURE: Application did not become healthy within the timeout period"
            echo "üïê Waited for $(($MAX_HEALTH_CHECK_ATTEMPTS * $HEALTH_CHECK_INTERVAL)) seconds"
            echo "üîó URL: $APP_URL"
            echo ""
            echo "Possible reasons:"
            echo "  - Kyma pod failed to pull the image"
            echo "  - Application failed to start"
            echo "  - Health check endpoint is not responding"
            echo "  - Network connectivity issues"
            exit 1
          fi

      - name: üéâ Deployment Complete
        run: |
          echo "‚úÖ Container image built and pushed successfully"
          if [ -n "${{ github.event.client_payload.app_url }}" ]; then
            echo "‚úÖ Application health check passed"
            echo "üåê Application URL: ${{ github.event.client_payload.app_url }}"
          fi
