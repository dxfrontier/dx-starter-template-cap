name: Build Container Image and Push to ghcr.io

on:
  repository_dispatch:
    types: [container_build]

permissions:
  contents: read
  packages: write

jobs:
  build_and_deploy:
    name: üöÄ Build and Deploy
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 20

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install Dependencies
        run: |
          echo "üì¶ Installing Node.js dependencies..."
          # Try npm ci first, fallback to npm install if lock file is out of sync
          if ! npm ci; then
            echo "‚ö†Ô∏è npm ci failed, falling back to npm install..."
            npm install
          fi
          echo "‚úÖ Dependencies installed"

      - name: üõ†Ô∏è Install CAP Development Kit
        run: |
          echo "üõ†Ô∏è Installing SAP CAP Development Kit globally..."
          npm install -g @sap/cds-dk
          echo "‚úÖ CAP Development Kit installed"

      - name: üèóÔ∏è Build CAP Application
        run: |
          echo "üèóÔ∏è Building CAP application..."
          npm run build
          echo "‚úÖ CAP application built"

      - name: üîê Generate AMS DCL Files
        run: |
          echo "üîê Generating AMS DCL files..."
          # The build script already includes AMS DCL generation
          echo "‚úÖ AMS DCL files generated (included in build step)"

          # List generated files for debugging
          if [ -d "gen/policies" ]; then
            echo "üìã Generated AMS files:"
            find gen/policies -name "*.dcl" -type f | head -10
          else
            echo "‚ö†Ô∏è No gen/policies directory found"
          fi

      - name: üîí Registry Login
        run: |
          echo "üîê Authenticating with container registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io \
            -u "dx.local" \
            --password-stdin
          echo "‚úÖ Registry login successful"

      - name: üê≥ Build and Push Application Image
        run: |
          echo "üê≥ Building Docker image for '$IMAGE_NAME' with tag 'latest' ..."
          docker build -t ghcr.io/dxfrontier/$IMAGE_NAME:latest ./
          echo "‚úÖ Image built."

          echo "üì§ Pushing image to GHCR..."
          docker push ghcr.io/dxfrontier/$IMAGE_NAME:latest
          echo "‚úÖ Image pushed."
        env:
          IMAGE_NAME: ${{ github.event.client_payload.image || inputs.image_name }}

      - name: üîê Build and Push AMS Policies Deployer Image
        run: |
          echo "üîê Building AMS Policies Deployer image..."

          # Create temporary directory for AMS deployer
          mkdir -p /tmp/ams-deployer

          # Create AMS deployer files
          echo "üìù Creating AMS deployer files..."

          # Create package.json for AMS deployer
          echo '{
            "name": "ams-dcl-content-deployer",
            "version": "1.0.0",
            "description": "AMS DCL Content Deployer",
            "main": "index.js",
            "dependencies": {
              "@sap/ams": "^3"
            },
            "scripts": {
              "start": "node index.js"
            }
          }' > /tmp/ams-deployer/package.json

          # Create deployment script for AMS deployer
          cat > /tmp/ams-deployer/deploy.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          console.log('AMS DCL Content Deployer');
          console.log('Scanning for DCL files...');

          function findDclFiles(dir) {
            const files = [];
            if (!fs.existsSync(dir)) {
              console.log('Directory ' + dir + ' does not exist');
              return files;
            }

            const items = fs.readdirSync(dir);
            for (const item of items) {
              const fullPath = path.join(dir, item);
              const stat = fs.statSync(fullPath);
              if (stat.isDirectory()) {
                files.push(...findDclFiles(fullPath));
              } else if (item.endsWith('.dcl')) {
                files.push(fullPath);
              }
            }
            return files;
          }

          const dclFiles = findDclFiles('/app/dcl');
          console.log('Found ' + dclFiles.length + ' DCL files:');
          dclFiles.forEach(file => console.log('  - ' + file));

          if (dclFiles.length > 0) {
            console.log('AMS DCL files ready for deployment');
            dclFiles.forEach(file => {
              console.log('Content of ' + file + ':');
              console.log(fs.readFileSync(file, 'utf8'));
              console.log('---');
            });
          } else {
            console.log('No DCL files found to deploy');
          }

          console.log('AMS DCL deployment process completed');
          EOF

          # Create Dockerfile for AMS deployer
          cat > /tmp/ams-deployer/Dockerfile << 'EOF'
          FROM node:20-alpine

          WORKDIR /app

          # Copy package.json and install dependencies
          COPY ./package.json /app/package.json
          RUN npm install --production

          # Copy deployment script
          COPY ./deploy.js /app/deploy.js

          # Copy DCL files
          COPY ./dcl /app/dcl

          CMD ["node", "/app/deploy.js"]
          EOF
          
          # Copy DCL files from the generated policies directory to the deployer build context
          if [ -d "./gen/policies/dcl" ]; then
            echo "üìã Copying generated DCL files to build context..."
            cp -r ./gen/policies/dcl /tmp/ams-deployer/dcl
          elif [ -d "./gen/policies" ]; then
            echo "üìã Copying generated policies directory to build context..."
            cp -r ./gen/policies /tmp/ams-deployer/dcl
          else
            echo "‚ö†Ô∏è No generated policies found, creating empty dcl directory"
            mkdir -p /tmp/ams-deployer/dcl
            echo "‚ö†Ô∏è Warning: AMS deployer will have no policies to deploy!"
          fi

          # List what we're copying for debugging
          echo "üìã Contents of AMS deployer build context:"
          ls -la /tmp/ams-deployer/
          if [ -d "/tmp/ams-deployer/dcl" ]; then
            echo "üìã DCL files to be deployed:"
            find /tmp/ams-deployer/dcl -name "*.dcl" -type f | head -10
          fi

          # Build the AMS deployer image
          echo "üê≥ Building AMS deployer image..."
          docker build -t ghcr.io/dxfrontier/$IMAGE_NAME-ams-deployer:latest /tmp/ams-deployer/
          echo "‚úÖ AMS deployer image built."

          # Push the AMS deployer image
          echo "üì§ Pushing AMS deployer image to GHCR..."
          docker push ghcr.io/dxfrontier/$IMAGE_NAME-ams-deployer:latest
          echo "‚úÖ AMS deployer image pushed."
        env:
          IMAGE_NAME: ${{ github.event.client_payload.image || inputs.image_name }}

      - name: üè• Health Check - Wait for Pod to Spawn
        if: ${{ (github.event.client_payload.app_url != '' && github.event.client_payload.app_url != null) || (inputs.app_url != '' && inputs.app_url != null) }}
        run: |
          APP_URL="${{ github.event.client_payload.app_url || inputs.app_url }}"
          MAX_HEALTH_CHECK_ATTEMPTS="${{ github.event.client_payload.max_health_check_attempts || inputs.max_health_check_attempts }}"
          HEALTH_CHECK_INTERVAL="${{ github.event.client_payload.health_check_interval || inputs.health_check_interval }}"

          # Set defaults if not provided
          MAX_HEALTH_CHECK_ATTEMPTS=${MAX_HEALTH_CHECK_ATTEMPTS:-60}
          HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-10}

          if [ -z "$APP_URL" ]; then
            echo "‚ö†Ô∏è No app URL provided, skipping health check"
            exit 0
          fi

          # Construct health endpoint URL
          HEALTH_URL="${APP_URL}/health"

          echo "üîç Starting health check for: $HEALTH_URL"
          echo "‚è±Ô∏è Will attempt $MAX_HEALTH_CHECK_ATTEMPTS times with $HEALTH_CHECK_INTERVAL second intervals"

          ATTEMPT=0
          SUCCESS=false

          while [ $ATTEMPT -lt $MAX_HEALTH_CHECK_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "üîÑ Attempt $ATTEMPT/$MAX_HEALTH_CHECK_ATTEMPTS..."

            # Call the health endpoint and capture both status code and response body
            RESPONSE=$(curl -s -w "\n%{http_code}" --connect-timeout 10 --max-time 30 "$HEALTH_URL" 2>/dev/null || echo -e "\n000")

            # Split response into body and status code
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            echo "üìä HTTP Status: $HTTP_CODE"

            # Check if we got HTTP 200 and the response contains "status":"UP"
            if [ "$HTTP_CODE" = "200" ] && echo "$BODY" | grep -q '"status":"UP"'; then
              echo "‚úÖ SUCCESS! Application is healthy"
              echo "üéâ Pod has successfully spawned and is responding correctly"
              SUCCESS=true
              break
            else
              if [ "$HTTP_CODE" = "000" ]; then
                echo "‚è≥ Cannot connect to health endpoint. Pod may not be ready yet..."
              elif [ "$HTTP_CODE" != "200" ]; then
                echo "‚è≥ Health endpoint returned HTTP $HTTP_CODE. Waiting for pod to be ready..."
              else
                echo "‚è≥ Health endpoint returned HTTP 200 but status is not UP."
              fi

              if [ $ATTEMPT -lt $MAX_HEALTH_CHECK_ATTEMPTS ]; then
                echo "   Waiting $HEALTH_CHECK_INTERVAL seconds before next attempt..."
                sleep $HEALTH_CHECK_INTERVAL
              fi
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "‚ùå FAILURE: Application did not become healthy within the timeout period"
            exit 1
          fi

      - name: üéâ Deployment Complete
        run: |
          echo "‚úÖ Container image built and pushed successfully"
          echo "‚úÖ AMS Policies Deployer image built and pushed successfully"
          APP_URL="${{ github.event.client_payload.app_url || inputs.app_url }}"
          if [ -n "$APP_URL" ]; then
            echo "‚úÖ Application health check passed"
            echo "üåê Application URL: $APP_URL"
          fi
