name: Build Container Image and Push to ghcr.io

on:
  repository_dispatch:
    types: [container_build]

permissions:
  contents: read
  packages: write

jobs:
  build_and_deploy:
    name: üöÄ Build and Deploy
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 20

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üîí Registry Login
        run: |
          echo "üîê Authenticating with container registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io \
            -u "dx.local" \
            --password-stdin
          echo "‚úÖ Registry login successful"

      - name: üê≥ Build and Push
        run: |
          echo "üê≥ Building Docker image for '$IMAGE_NAME' with tag 'latest' ..."
          docker build -t ghcr.io/dxfrontier/$IMAGE_NAME:latest ./
          echo "‚úÖ Image built."

          echo "üì§ Pushing image to GHCR..."
          docker push ghcr.io/dxfrontier/$IMAGE_NAME:latest
          echo "‚úÖ Image pushed."
        env:
          IMAGE_NAME: ${{ github.event.client_payload.image }}

      - name: üè• Health Check - Wait for Pod to Spawn
        if: ${{ github.event.client_payload.app_url != '' && github.event.client_payload.app_url != null }}
        run: |
          APP_URL="${{ github.event.client_payload.app_url }}"
          MAX_HEALTH_CHECK_ATTEMPTS="${{ github.event.client_payload.max_health_check_attempts }}"
          HEALTH_CHECK_INTERVAL="${{ github.event.client_payload.health_check_interval }}"

          # Set defaults if not provided
          MAX_HEALTH_CHECK_ATTEMPTS=${MAX_HEALTH_CHECK_ATTEMPTS:-60}
          HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-10}

          if [ -z "$APP_URL" ]; then
            echo "‚ö†Ô∏è No app URL provided, skipping health check"
            exit 0
          fi

          # Construct health endpoint URL
          HEALTH_URL="${APP_URL}/health"

          echo "üîç Starting health check for: $HEALTH_URL"
          echo "‚è±Ô∏è Will attempt $MAX_HEALTH_CHECK_ATTEMPTS times with $HEALTH_CHECK_INTERVAL second intervals"
          echo "‚è≥ Maximum wait time: $(($MAX_HEALTH_CHECK_ATTEMPTS * $HEALTH_CHECK_INTERVAL)) seconds (~$(($MAX_HEALTH_CHECK_ATTEMPTS * $HEALTH_CHECK_INTERVAL / 60)) minutes)"

          ATTEMPT=0
          SUCCESS=false

          while [ $ATTEMPT -lt $MAX_HEALTH_CHECK_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo ""
            echo "üîÑ Attempt $ATTEMPT/$MAX_HEALTH_CHECK_ATTEMPTS..."

            # Call the health endpoint and capture both status code and response body
            RESPONSE=$(curl -s -w "\n%{http_code}" --connect-timeout 10 --max-time 30 "$HEALTH_URL" 2>/dev/null || echo -e "\n000")

            # Split response into body and status code
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            echo "üìä HTTP Status: $HTTP_CODE"
            echo "üìÑ Response: $BODY"

            # Check if we got HTTP 200 and the response contains "status":"UP"
            if [ "$HTTP_CODE" = "200" ] && echo "$BODY" | grep -q '"status":"UP"'; then
              echo "‚úÖ SUCCESS! Application is healthy"
              echo "üéâ Pod has successfully spawned and is responding correctly"
              SUCCESS=true
              break
            else
              if [ "$HTTP_CODE" = "000" ]; then
                echo "‚è≥ Cannot connect to health endpoint. Pod may not be ready yet..."
              elif [ "$HTTP_CODE" != "200" ]; then
                echo "‚è≥ Health endpoint returned HTTP $HTTP_CODE. Waiting for pod to be ready..."
              else
                echo "‚è≥ Health endpoint returned HTTP 200 but status is not UP. Response: $BODY"
              fi

              if [ $ATTEMPT -lt $MAX_HEALTH_CHECK_ATTEMPTS ]; then
                echo "   Waiting $HEALTH_CHECK_INTERVAL seconds before next attempt..."
                sleep $HEALTH_CHECK_INTERVAL
              fi
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo ""
            echo "‚ùå FAILURE: Application did not become healthy within the timeout period"
            echo "üïê Waited for $(($MAX_HEALTH_CHECK_ATTEMPTS * $HEALTH_CHECK_INTERVAL)) seconds"
            echo "üîó Health URL: $HEALTH_URL"
            echo ""
            echo "Possible reasons:"
            echo "  - Pod failed to start or pull the image"
            echo "  - Application failed to start properly"
            echo "  - Health endpoint is not responding with {\"status\":\"UP\"}"
            echo "  - Network connectivity issues"
            exit 1
          fi

      - name: üéâ Deployment Complete
        run: |
          echo "‚úÖ Container image built and pushed successfully"
          if [ -n "${{ github.event.client_payload.app_url }}" ]; then
            echo "‚úÖ Application health check passed"
            echo "üåê Application URL: ${{ github.event.client_payload.app_url }}"
          fi
